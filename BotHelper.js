const crypto = require('crypto');
const fs = require('fs');
const axios = require('axios');
const path = require('path');

class BotHelper {
    //  –í –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API, –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79785667199 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ chatId –∞–Ω–∫–µ—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ –¢–ó –ì–ü –ê–∫–≤–∞
    static async anketaByPhoneSearchAndGoalChoosing(phone, bot, chatId, comment) {
        console.log(`–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –∞–Ω–∫–µ—Ç—É, –∏—â—É –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ${phone}`);
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
        const sign = crypto.createHash('sha256')
            .update('phone:' + phone + ";key:" + process.env.SECRET_KEY)
            .digest('hex');

        const passTokenUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/pass_token/?phone=${phone}&sign=${sign}`;

        try {
            const passTokenResponse = await axios.get(passTokenUrl, {
                headers: {
                    'Content-Type': 'application/json',
                    apikey: process.env.API_KEY,
                    Authorization: process.env.AUTHORIZATION
                }
            });

            if (passTokenResponse.data.result && passTokenResponse.data.data.pass_token) {
                const passToken = passTokenResponse.data.data.pass_token;

                let ticketsText = await this.getTicketsText(passToken);

                let clientResponse = await this.getClientResponse(passToken);

                if (clientResponse.data.result) {
                    const client = clientResponse.data.data;
                    const id = client.id;
                    const name = `${client.name} ${client.last_name}`;
                    // const phone = `${client.phone}`;
                    const birthDate = new Date(client.birthday).toLocaleDateString("ru-RU");
                    const photoUrl = client.photo;
                    const tags = client.tags.map(tag => `# ${tag.title}`).join('\n');

                    // let tag = "–•–û–ß–ï–¢ –ù–ê –í–ü–¢";
                    // try {
                    //   await this.addTag(passToken, id, tag);
                    //   await bot.sendMessage(chatId, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: "${tag}"`);
                    // } catch (e) {
                    //   await bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ "${tag}"`);
                    // }

                    // try {
                    //   await this.deleteTag(passToken, id, tag);
                    //   await bot.sendMessage(chatId, `–£–¥–∞–ª–µ–Ω —Ç–µ–≥ "${tag}"`);
                    // } catch (e) {
                    //   console.error(e);
                    //   await bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tag}"`);
                    // }

                    let captionText = `${ticketsText}\n${tags}\n\n${name} (${birthDate})\n+${phone}\n\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –í–ü–¢:\n‚úçÔ∏è ${comment}\n\n‚úÖ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –í–ü–¢ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üôÇ`;
                    const { fileId, messageId } = await this.sendPhotoCaptionTextKeyboard(bot, chatId, photoUrl, captionText);

                    let inline_keyboard = [
                        [
                            { text: "–¢–ó üèãüèº‚Äç‚ôÇÔ∏è", callback_data: ['vc_goal', 'tz', messageId, phone].join('@') },
                            { text: "–ì–ü ü§∏üèª‚Äç‚ôÄÔ∏è", callback_data: ['vc_goal', 'gp', messageId, phone].join('@') },
                            { text: "–ê–∫–≤–∞ üèä", callback_data: ['vc_goal', 'aq', messageId, phone].join('@') }
                        ],
                        [
                            { text: "‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data: ['vc_goal', 'cancel', messageId, phone].join('@') }
                        ]
                    ];
                    await this.updateInlineKeyboard(bot, chatId, messageId, inline_keyboard);

                    // –ë—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î
                    let requestVptComment = `${ticketsText}\n${tags}\n\n${name} (${birthDate})\n+${phone}\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ:\n‚úçÔ∏è ${comment}`;
                    return { requestVptComment, fileId };
                } else {
                    bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
                }
            } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            }
        } catch (error) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
            console.error(error);
        }

    }

    static async anketaTrainerChoosingToFitDir(bot, prisma, requestVptComment, requestVptPhotoId, goal, visitTime, authorTelegramUserInfo, phoneWithoutPlus, vptRequest) {

        console.log('–©–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ –∏ –º–µ–≥–∞–∫–æ–º–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');

        let fitDirChatId = await this.getFitDirChatId(prisma);
        if (!fitDirChatId) {
            bot.sendMessage('–§–∏—Ç–î–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –ø–æ–∫–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        let goalRusWithEmojii = this.goalRusWithEmojii(goal);
        let captionText = `${requestVptComment}\n–¶–µ–ª—å: ${goalRusWithEmojii}\n–í—Ä–µ–º—è: ${visitTime}\n–ê–≤—Ç–æ—Ä: ${authorTelegramUserInfo}`;
        const sentMessage = await bot.sendPhoto(fitDirChatId, requestVptPhotoId, {
            caption: captionText,
            parse_mode: 'Markdown'
        });
        let messageId = sentMessage.message_id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è



        // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏
        let goalRus = this.goalRus(goal);
        let trainersWithGoal = await this.getUsersByGoal(prisma, goalRus);
        trainersWithGoal = trainersWithGoal.map(el => { return { name: el.name, chatId: el.chatId, telegramID: el.telegramID }; });
        let buttonsPerRow = 3;
        let inline_keyboard = [];
        let row = [];
        trainersWithGoal.forEach((trainer, index) => {
            row.push({
                text: trainer.name,
                callback_data: ['vs', goal, messageId, phoneWithoutPlus, trainer.chatId, visitTime].join('@')
            });

            if (row.length === buttonsPerRow || index === trainersWithGoal.length - 1) {
                inline_keyboard.push(row);
                row = [];
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        inline_keyboard.push([
            { text: "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data: ['vs', 'delete', messageId, phoneWithoutPlus, vptRequest.id].join('@') }
        ]);

        await this.updateInlineKeyboard(bot, fitDirChatId, messageId, inline_keyboard);
        console.log('keyboard with trainers updated!');

    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    static async updateButtonText(bot, chatId, messageId, inlineKeyboard, targetCallbackData, newText) {
        try {
            if (!inlineKeyboard) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏
            let updatedKeyboard = inlineKeyboard.map(row =>
                row.map(button =>
                    button.callback_data === targetCallbackData ? { ...button, text: newText } : button
                )
            );

            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await bot.editMessageReplyMarkup({ inline_keyboard: updatedKeyboard }, { chat_id: chatId, message_id: messageId });

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏:', error);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å captionText –≤ —á–∞—Ç cahtId –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fileId (—Ñ–æ—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º)  –∏ messageId (id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ)
    static async sendPhotoCaptionTextKeyboard(bot, chatId, photoUrl, captionText) {
        try {
            let filePath;

            if (!photoUrl) {
                // –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª g1.jpeg
                filePath = path.join(__dirname, 'g1.jpeg');
            } else {
                const headers = {
                    'Authorization': process.env.AUTHORIZATION,
                    'apikey': process.env.API_KEY
                };
                const response = await axios.get(photoUrl, {
                    headers,
                    responseType: 'arraybuffer'
                });

                filePath = path.join(__dirname, 'photo.jpg');
                fs.writeFileSync(filePath, response.data);
            }

            const sentMessage = await bot.sendPhoto(chatId, filePath, {
                caption: captionText,
                parse_mode: 'Markdown'
            });

            const messageId = sentMessage.message_id;
            const fileId = sentMessage.photo[sentMessage.photo.length - 1].file_id;

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –µ–≥–æ
            if (photoUrl) {
                fs.unlinkSync(filePath);
            }

            return { fileId, messageId };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.');
            return null;
        }
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–∫–Ω—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ chatId –∏ messageId
    static async deleteMessage(bot, chatId, messageId) {
        try {
            await bot.deleteMessage(chatId, messageId);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    }
    // –ó–Ω–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    static async updateInlineKeyboard(bot, chatId, messageId, newKeyboard) {
        // console.log(newKeyboard);
        try {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: newKeyboard },
                { chat_id: chatId, message_id: messageId }
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è  
    static translateStatus(status) {
        const translations = {
            "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
            "not_active": "üü† –ù–µ –∞–∫—Ç–∏–≤–Ω–æ",
            "frozen": "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ",
            "locked": "üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
            "closed": "‚ùå –ó–∞–∫—Ä—ã—Ç–æ"
        };

        return translations[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
    }

    // –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥
    static async addTag(userToken, clientId, tag) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
        const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag`;
        await axios.post(tagUrl, {
            tag: tag,
            client_id: clientId
        }, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: userToken
            }
        });
    }

    // —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥
    static async deleteTag(userToken, clientId, tag) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
        const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag?tag=${tag}&client_id=${clientId}`;
        await axios.delete(tagUrl, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: userToken
            }
        });
    }

    // –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–ª–µ–Ω—Å—Ç–≤–∞—Ö/–ø–∞–∫–µ—Ç–∞—Ö/—É—Å–ª—É–≥–∞—Ö
    static async getTicketsText(passToken) {
        const ticketsUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tickets`;
        const ticketsResponse = await axios.get(ticketsUrl, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: passToken
            }
        });

        function getMembershipServices(el) {
            return (el.type === 'membership' && el.service_list && el.service_list.length > 0)
                ? '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:\n' + el.service_list
                    .map(ss => `üî• ${ss.title}\n–û—Å—Ç–∞—Ç–æ–∫: ${ss.count}, —Ä–µ–∑–µ—Ä–≤: ${ss.count_reserves}`).join('\n') + '\n'
                : '';
        }

        function getEndDate(el) {
            return el.end_date
                ? `(–¥–æ ${new Date(el.end_date).toLocaleDateString("ru-RU")})\n`
                : '';
        }

        function getPackageCount(el) {
            return (el.type === 'package' && el.count)
                ? `–û—Å—Ç–∞—Ç–æ–∫: ${el.count}\n`
                : '';
        }

        if (ticketsResponse.data) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ package –∏ membership
            const filteredData = ticketsResponse.data.data.filter(el =>
                el.type === 'package' || el.type === 'membership'
            );

            let txt = filteredData.map(el =>
                `${this.translateStatus(el.status)}: ${el.title}\n${getEndDate(el)}${getPackageCount(el)}${getMembershipServices(el)}`
            ).join('\n');

            return txt || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö.";
        } else {
            return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö.";
        }
    }


    // –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    static async getClientResponse(passToken) {
        const clientUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/client`;
        const clientResponse = await axios.get(clientUrl, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: passToken
            }
        });
        return clientResponse;
    }

    // +7(978) 566-71-99 —Ö–æ—á–µ—Ç –Ω–∞ –í–ü–¢
    // –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ phone: 79785667199, comment: "—Ö–æ—á–µ—Ç –Ω–∞ –í–ü–¢"
    static parseMessage(message) {
        let match = message?.match(/([+8]?\d?[\s\-\(\)]*\d{3}[\s\-\(\)]*\d{3}[\s\-]*\d{2}[\s\-]*\d{2})([\s\S]*)/);

        if (!match) return null;

        let rawPhone = match[1];
        let comment = match[2].trim().replace(/\s+/g, " "); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        let phone = rawPhone.replace(/\D/g, "");

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–¥–æ–±–∞–≤–ª—è–µ–º 7, –µ—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ—Å–ª–∏ —É–∂–µ 11 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 7)
        if (phone.length === 10) {
            phone = "7" + phone;
        } else if (phone.length === 11 && phone.startsWith("8")) {
            phone = "7" + phone.slice(1);
        } else if (phone.length === 11 && phone.startsWith("+7")) {
            phone = "7" + phone.slice(2);
        }

        return { phone: phone, comment: comment };
    }

    static async getFitDirChatId(prisma) {
        const fitDirPhone = process.env.FIT_DIR_PHONE;
        if (!fitDirPhone) {
            console.error("FIT_DIR_PHONE –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
            return null;
        }

        const user = await prisma.user.findUnique({
            where: { phoneNumber: fitDirPhone },
            select: { chatId: true }
        });

        return user ? user.chatId : null;
    }

    // —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø–æ "–¢–ó" –∏–ª–∏ "–ì–ü" –∏–ª–∏ "–ê–∫–≤–∞"
    static async getUsersByGoal(prisma, goal) {
        if (!goal) {
            console.error("Goal –Ω–µ –∑–∞–¥–∞–Ω");
            return [];
        }

        const users = await prisma.user.findMany({
            where: {
                vpt_list: {
                    contains: goal
                }
            },
            orderBy: {
                name: "asc"
            }
        });

        return users;
    }

    static async getUserByChatId(prisma, chatId) {
        if (!chatId) {
            console.error("Chat ID –Ω–µ –∑–∞–¥–∞–Ω");
            return null;
        }

        const user = await prisma.user.findUnique({
            where: { chatId }
        });

        return user;
    }


    static async getVPTRequestById(prisma, id) {
        try {
            const vptRequest = await prisma.vPTRequest.findUnique({
                where: { id }
            });

            return vptRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }

    static async deleteVPTRequestById(prisma, id) {
        try {
            const deletedRequest = await prisma.vPTRequest.delete({
                where: { id }
            });

            return deletedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }


    static async createVPTRequest(prisma, userId, screenshotUserId, visitTime, phoneNumber, photo, comment, goal, tgChatMessageId) {
        const vptRequest = await prisma.vPTRequest.create({
            data: {
                user: userId ? { connect: { id: userId } } : undefined, // –°–≤—è–∑—ã–≤–∞–µ–º user, –µ—Å–ª–∏ userId —É–∫–∞–∑–∞–Ω
                screenshotUser: {
                    connect: { uniqueId: screenshotUserId } // –°–≤—è–∑—ã–≤–∞–µ–º screenshotUser
                },
                visitTime,
                phoneNumber,
                photo,
                comment,
                goal,
                tgChatMessageId
            }
        });

        return vptRequest;
    }

    // –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ tgChatMessageId –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –í–ü–¢
    static async updateTgChatMessageId(prisma, id, tgChatMessageId) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { tgChatMessageId }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tgChatMessageId –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }

    static async updateVPTRequestPhoto(prisma, id, photoUrl) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { photo: photoUrl }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è photoUrl –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }


    // –°–æ–∑–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ –≤ –ë–î
    static async checkOrCreateScreenshotUser(prisma, telegramID, telegramNickname) {
        try {
            let uniqueId = telegramID.toString();
            let sender = telegramNickname;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ScreenshotUser —Å —Ç–∞–∫–∏–º uniqueId
            let screenshotUser = await prisma.screenshotUser.findUnique({
                where: { uniqueId }
            });

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!screenshotUser) {
                screenshotUser = await prisma.screenshotUser.create({
                    data: {
                        uniqueId,
                        sender
                    }
                });
            }

            return screenshotUser;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ ScreenshotUser:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ScreenshotUser");
        }
    }

    static getQueryTelegramUserInfo(query) {
        return '@' + (query?.from?.username || '–ù–µ—Ç–ù–∏–∫–Ω–µ–π–º–∞') + ' (' + (query?.from?.first_name || '–ù–µ—Ç–ò–º–µ–Ω–∏ ') + ' ' + (query?.from?.last_name || '–ù–µ—Ç–§–∞–º–∏–ª–∏–∏') + ')'; // –ù–∏–∫–Ω–µ–π–º (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    }

    static goalRus(goal) {
        let goalRus = goal;
        if (goal === 'tz') { goalRus = '–¢–ó'; }
        if (goal === 'gp') { goalRus = '–ì–ü'; }
        if (goal === 'aq') { goalRus = '–ê–∫–≤–∞'; }
        return goalRus;
    }

    static goalRusWithEmojii(goal) {
        let goalRus = goal;
        if (goal === 'tz') { goalRus = 'üèãüèº‚Äç‚ôÇÔ∏è –¢–ó'; }
        if (goal === 'gp') { goalRus = 'ü§∏üèª‚Äç‚ôÄÔ∏è –ì–ü'; }
        if (goal === 'aq') { goalRus = 'üèä –ê–∫–≤–∞'; }
        return goalRus;
    }

}

module.exports = BotHelper;