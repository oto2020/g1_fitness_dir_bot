const crypto = require('crypto');
const fs = require('fs');
const axios = require('axios');
const path = require('path');

class BotHelper {
// –û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API, –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79785667199 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ chatId –∞–Ω–∫–µ—Ç—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞—è–≤–∫–∏
static async anketaByPhoneVptRequestCreation(phone, bot, chatId) {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏
    const sign = crypto.createHash('sha256')
        .update('phone:' + phone + ";key:" + process.env.SECRET_KEY)
        .digest('hex');

    const passTokenUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/pass_token/?phone=${phone}&sign=${sign}`;

    try {
        const passTokenResponse = await axios.get(passTokenUrl, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION
            }
        });

        if (passTokenResponse.data.result && passTokenResponse.data.data.pass_token) {
            const passToken = passTokenResponse.data.data.pass_token;

            let ticketsText = await this.getTicketsText(passToken);

            let clientResponse = await this.getClientResponse(passToken);

            if (clientResponse.data.result) {
                const client = clientResponse.data.data;
                const id = client.id;
                const name = `${client.name} ${client.last_name}`;
                // const phone = `${client.phone}`;
                const birthDate = new Date(client.birthday).toLocaleDateString("ru-RU");
                const photo = client.photo;
                const tags = client.tags.map(tag => `#${tag.title}`).join('\n');

                // let tag = "–•–û–ß–ï–¢ –ù–ê –í–ü–¢";
                // try {
                //   await this.addTag(passToken, id, tag);
                //   await bot.sendMessage(chatId, `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–µ–≥: "${tag}"`);
                // } catch (e) {
                //   await bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ "${tag}"`);
                // }

                // try {
                //   await this.deleteTag(passToken, id, tag);
                //   await bot.sendMessage(chatId, `–£–¥–∞–ª–µ–Ω —Ç–µ–≥ "${tag}"`);
                // } catch (e) {
                //   console.error(e);
                //   await bot.sendMessage(chatId, `–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ "${tag}"`);
                // }

                let captionText = `–ò–º—è: ${name}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}\n${tags}\n\n–ë–∏–ª–µ—Ç—ã:\n${ticketsText}`;
                const { fileId, messageId } = await this.sendPhotoCaptionTextKeyboard(bot, chatId, photo, captionText);

                let inline_keyboard = [
                    [
                        { text: "–¢–ó üèãüèº‚Äç‚ôÇÔ∏è", callback_data: ['vc', 'tz', messageId, phone].join('@') },
                        { text: "–ì–ü ü§∏üèª‚Äç‚ôÄÔ∏è", callback_data: ['vc', 'gp', messageId, phone].join('@') },
                        { text: "–ê–∫–≤–∞ üèä", callback_data: ['vc', 'aq', messageId, phone].join('@') }
                    ],
                    [
                        { text: "‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data: ['vc', 'cancel', messageId, phone].join('@') }
                    ]
                ];
                await this.updateInlineKeyboard(bot, chatId, messageId, inline_keyboard);

                if (fileId) {
                    console.log(`Photo file_id: ${fileId}`);
                }
            } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
            }
        } else {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } catch (error) {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º.');
        console.error(error);
    }

}

// –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
static async updateButtonText(bot, chatId, messageId, inlineKeyboard, targetCallbackData, newText) {
    try {
        if (!inlineKeyboard) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        let updatedKeyboard = inlineKeyboard.map(row =>
            row.map(button =>
                button.callback_data === targetCallbackData ? { ...button, text: newText } : button
            )
        );

        // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.editMessageReplyMarkup({ inline_keyboard: updatedKeyboard }, { chat_id: chatId, message_id: messageId });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å captionText –≤ —á–∞—Ç cahtId –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fileId (—Ñ–æ—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º)  –∏ messageId (id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ)
static async sendPhotoCaptionTextKeyboard(bot, chatId, photoUrl, captionText) {
    try {
        const headers = {
            'Authorization': process.env.AUTHORIZATION,
            'apikey': process.env.API_KEY
        };
        const response = await axios.get(photoUrl, {
            headers,
            responseType: 'arraybuffer'
        });

        const filePath = path.join(__dirname, 'photo.jpg');
        fs.writeFileSync(filePath, response.data);

        const sentMessage = await bot.sendPhoto(chatId, filePath, {
            caption: captionText,
            parse_mode: 'Markdown'
        });

        const messageId = sentMessage.message_id;
        const fileId = sentMessage.photo[sentMessage.photo.length - 1].file_id;

        fs.unlinkSync(filePath);

        return { fileId, messageId };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
        bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.');
        return null;
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–∫–Ω—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ chatId –∏ messageId
static async deleteMessage(bot, chatId, messageId) {
    try {
        await bot.deleteMessage(chatId, messageId);
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
    }
}
// –ó–Ω–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
static async updateInlineKeyboard(bot, chatId, messageId, newKeyboard) {
    // console.log(newKeyboard);
    try {
        await bot.editMessageReplyMarkup(
            { inline_keyboard: newKeyboard },
            { chat_id: chatId, message_id: messageId }
        );
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è  
static translateStatus(status) {
    const translations = {
        "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
        "not_active": "üü† –ù–µ –∞–∫—Ç–∏–≤–Ω–æ",
        "frozen": "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ",
        "locked": "üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
        "closed": "‚ùå –ó–∞–∫—Ä—ã—Ç–æ"
    };

    return translations[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
}

// –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥
static async addTag(userToken, clientId, tag) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
    const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag`;
    await axios.post(tagUrl, {
        tag: tag,
        client_id: clientId
    }, {
        headers: {
            'Content-Type': 'application/json',
            apikey: process.env.API_KEY,
            Authorization: process.env.AUTHORIZATION,
            usertoken: userToken
        }
    });
}

// —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥
static async deleteTag(userToken, clientId, tag) {
    // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
    const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag?tag=${tag}&client_id=${clientId}`;
    await axios.delete(tagUrl, {
        headers: {
            'Content-Type': 'application/json',
            apikey: process.env.API_KEY,
            Authorization: process.env.AUTHORIZATION,
            usertoken: userToken
        }
    });
}

// –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–ª–µ–Ω—Å—Ç–≤–∞—Ö/–ø–∞–∫–µ—Ç–∞—Ö/—É—Å–ª—É–≥–∞—Ö
static async getTicketsText(passToken) {
    const ticketsUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tickets`;
    const ticketsResponse = await axios.get(ticketsUrl, {
        headers: {
            'Content-Type': 'application/json',
            apikey: process.env.API_KEY,
            Authorization: process.env.AUTHORIZATION,
            usertoken: passToken
        }
    });
    function getMembershipServices(el) {
        return (el.type == 'membership' && el.service_list && el.service_list.length > 0)
            ? '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:\n' + el.service_list.map(ss => `‚ûñ${ss.title}\n–û—Å—Ç–∞—Ç–æ–∫: ${ss.count}(${ss.count_reserves})`).join('\n') + '\n'
            : '';
    }
    function getEndDate(el) {
        return (el.end_date) ? '(–¥–æ ' + new Date(el.end_date).toLocaleDateString("ru-RU") + ')\n' : '';
    }
    function getPackageCount(el) {
        return (el.type == 'package' && el.count) ? `–û—Å—Ç–∞—Ç–æ–∫: ${el.count}\n` : '';
    }
    if (ticketsResponse.data) {
        let txt = ticketsResponse.data.data.map(el => `${this.translateStatus(el.status)}: ${el.title}\n${getEndDate(el)}${getPackageCount(el)}${getMembershipServices(el)}`).join('\n');
        return txt;
    } else {
        return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö."
    }
}

// –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
static async getClientResponse(passToken) {
    const clientUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/client`;
    const clientResponse = await axios.get(clientUrl, {
        headers: {
            'Content-Type': 'application/json',
            apikey: process.env.API_KEY,
            Authorization: process.env.AUTHORIZATION,
            usertoken: passToken
        }
    });
    return clientResponse;
}

// +7(978) 566-71-99 —Ö–æ—á–µ—Ç –Ω–∞ –í–ü–¢
// –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ phone: 79785667199, comment: "—Ö–æ—á–µ—Ç –Ω–∞ –í–ü–¢"
static parseMessage(message) {
    let match = message?.match(/([+8]?\d?[\s\-\(\)]*\d{3}[\s\-\(\)]*\d{3}[\s\-]*\d{2}[\s\-]*\d{2})([\s\S]*)/);

    if (!match) return null;

    let rawPhone = match[1];
    let comment = match[2].trim().replace(/\s+/g, " "); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

    // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    let phone = rawPhone.replace(/\D/g, "");

    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–¥–æ–±–∞–≤–ª—è–µ–º 7, –µ—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ—Å–ª–∏ —É–∂–µ 11 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 7)
    if (phone.length === 10) {
        phone = "7" + phone;
    } else if (phone.length === 11 && phone.startsWith("8")) {
        phone = "7" + phone.slice(1);
    } else if (phone.length === 11 && phone.startsWith("+7")) {
        phone = "7" + phone.slice(2);
    }

    return { phone: phone, comment: comment };
}
}

module.exports = BotHelper;