const crypto = require('crypto');
const fs = require('fs');
const axios = require('axios');
const path = require('path');

class BotHelper {

    // –†–∞–±–æ—Ç–∞–µ—Ç —Å API, –≤—ã–¥–∞–µ—Ç –∞–Ω–∫–µ—Ç—É –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    static async apiClientData(phone) {
        console.log(`–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É ${phone}`);

        const sign = crypto.createHash('sha256')
            .update(`phone:${phone};key:${process.env.SECRET_KEY}`)
            .digest('hex');

        const passTokenUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/pass_token/?phone=${phone}&sign=${sign}`;

        try {
            const passTokenResponse = await axios.get(passTokenUrl, {
                headers: {
                    'Content-Type': 'application/json',
                    apikey: process.env.API_KEY,
                    Authorization: process.env.AUTHORIZATION
                }
            });

            if (!passTokenResponse.data.result || !passTokenResponse.data.data.pass_token) {
                throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pass_token');
            }

            const passToken = passTokenResponse.data.data.pass_token;
            const ticketsText = await this.getTicketsText(passToken);
            const clientResponse = await this.getClientResponse(passToken);

            if (!clientResponse.data.result) {
                throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞');
            }

            const client = clientResponse.data.data;
            return {
                passToken,
                ticketsText,
                client: {
                    id: client.id,
                    name: `${client.name} ${client.last_name}`,
                    birthDate: new Date(client.birthday).toLocaleDateString("ru-RU"),
                    phone: phone,
                    photoUrl: client.photo,
                    tags: client.tags.map(tag => `${tag.title}`).join('\n')
                }
            };
        } catch (error) {
            console.error(error);
            return null;
        }
    }

    static async anketaByPhoneSearchAndGoalChoosing(phone, bot, chatId, comment) {
        const clientData = await this.apiClientData(phone);
        if (!clientData) {
            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
        }

        const { ticketsText, client } = clientData;
        let anketa = `${ticketsText}\n${client.name} (${client.birthDate})\n+${client.phone}`;
        let captionText = `${client.tags}\n\n` +
            `${anketa}\n\n` +
            `–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞—è–≤–∫–µ –Ω–∞ –í–ü–¢:\n‚úçÔ∏è ${comment}\n\n` +
            `‚úÖ –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –í–ü–¢ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º üôÇ`;

        let apiSendPhotoObj = await this.apiSendPhotoUrl(bot, chatId, client.photoUrl, captionText);
        if (!apiSendPhotoObj) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ');
            return;
        }
        const { fileId, messageId } = apiSendPhotoObj;

        let inline_keyboard = [
            [
                { text: "–¢–ó üèãüèº‚Äç‚ôÇÔ∏è", callback_data: `vc_goal@tz@${messageId}@${phone}` },
                { text: "–ì–ü ü§∏üèª‚Äç‚ôÄÔ∏è", callback_data: `vc_goal@gp@${messageId}@${phone}` },
                { text: "–ê–∫–≤–∞ üèä", callback_data: `vc_goal@aq@${messageId}@${phone}` }
            ],
            [{ text: "‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data: `vc_goal@cancel@${messageId}@${phone}` }]
        ];
        await this.updateInlineKeyboard(bot, chatId, messageId, inline_keyboard);

        return { comment, tags: client.tags, anketa, fileId };
    }

    static captionTextForFitDir(firstRow, vptRequest, screenshotUser, lastRow) {
        const statusText =
            vptRequest.status === 'none' ? '–Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–æ'
                : vptRequest.status === 'accepted' ? '–ø—Ä–∏–Ω—è—Ç–æ'
                    : vptRequest.status === 'rejected' ? '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                        : '–Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞';

        let result = firstRow +
            `${vptRequest.tags}\n\n` +
            `${vptRequest.anketa}\n\n` +
            `‚úçÔ∏è  \"${vptRequest.comment}\"\n` +
            `${this.goalRusWithEmojii(vptRequest.goal)}\n` +
            `${this.visitTimeWithEmojii(vptRequest.visitTime)}\n\n` +
            `–ê–≤—Ç–æ—Ä: ${screenshotUser?.sender}\n\n` +
            `${vptRequest.history}\n\n` +
            `–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å #${vptRequest.id}: ${statusText}` +
            lastRow;

        if (result.length > 1000) {
            const anketaLines = vptRequest.anketa.split('\n');
            const shortenedAnketa = anketaLines.length > 2 ? `...\n${anketaLines.slice(-2).join('\n')}` : '...';
            result = result.replace(vptRequest.anketa, shortenedAnketa);
        }
        if (result.length > 1000) {
            result = result.replace(vptRequest.history, '...');
        }

        return result;
    }

    static captionTextForTrainer(firstRow, vptRequest, lastRow) {
        const statusText =
            vptRequest.status === 'none' ? '–Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–æ'
                : vptRequest.status === 'accepted' ? '–ø—Ä–∏–Ω—è—Ç–æ'
                    : vptRequest.status === 'rejected' ? '–æ—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                        : '–Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞';

        let result = firstRow +
            `${vptRequest.anketa}\n\n` +
            `‚úçÔ∏è –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:  ${vptRequest.comment}\n` +
            `${this.goalRusWithEmojii(vptRequest.goal)}\n` +
            `${this.visitTimeWithEmojii(vptRequest.visitTime)}\n\n` +
            lastRow;

        if (result.length > 1000) {
            const anketaLines = vptRequest.anketa.split('\n');
            const shortenedAnketa = anketaLines.length > 2 ? `...\n${anketaLines.slice(-2).join('\n')}` : '...';
            result = result.replace(vptRequest.anketa, shortenedAnketa);
        }
        if (result.length > 1000) {
            result = result.replace(vptRequest.history, '...');
        }

        return result;
    }



    // –£–¥–∞–ª—è–µ—Ç —Ç–µ–≥ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ 1–°
    static async deleteTagForVptRequest(bot, chatId, prisma, vptRequest) {
        try {
            let phoneWithoutPlus = this.parseMessage(vptRequest.phoneNumber)?.phone;

            let trainerId = vptRequest.userId;
            if (trainerId) {
                let trainer = await this.getUserById(prisma, trainerId);

                // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ API
                let clientData = await this.apiClientData(phoneWithoutPlus);
                if (!clientData) {
                    return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
                }

                // –°–æ–±–∏—Ä–∞–µ–º –¢–ï–ì –¢–†–ï–ù–ï–†–ê
                let newTag = BotHelper.getTag(trainer.name, vptRequest.goal);
                // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
                const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag?tag=${newTag}&client_id=${clientData.client.id}`;
                await axios.delete(tagUrl, {
                    headers: {
                        'Content-Type': 'application/json',
                        apikey: process.env.API_KEY,
                        Authorization: process.env.AUTHORIZATION,
                        usertoken: clientData.passToken
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
                clientData = await this.apiClientData(phoneWithoutPlus);
                if (!clientData) {
                    return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
                }
                // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—è–≤–∫–µ
                await this.updateVptRequestTags(prisma, vptRequest.id, clientData.client.tags);

                console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ #${vptRequest.id} –£–¥–∞–ª–µ–Ω —Ç–µ–≥: ${newTag}`);
            }
        } catch (e) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏–∑ 1–°', e);
        }

    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∫–µ—Ç—É —Ç—Ä–µ–Ω–µ—Ä—É, —Å—Ç–∞–≤–∏—Ç —Ç–µ–≥ —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ 1–°
    static async anketaToTrainer(bot, chatId, prisma, trainer, vptRequest) {
        let phoneWithoutPlus = this.parseMessage(vptRequest.phoneNumber)?.phone;
        // –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∫–µ—Ç—É –ø–æ API
        let clientData = await this.apiClientData(phoneWithoutPlus);
        if (!clientData) {
            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
        }

        //  –ó–∞–¥–µ–ª –Ω–∞ –±—É–¥—É—â–µ–µ. –ù–µ —Ç—Ä–æ–≥–∞—Ç—å! –ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç this.deleteTag
        // // –£–î–ê–õ–Ø–ï–ú –í–°–ï –¢–ï–ì–ò –¥–ª—è goal
        // let tags = clientData.client.tags.split("\n");
        // for (let tag of tags) {
        //     if (tag.startsWith(`–í–ü–¢ ${vptRequest.goal}`)) {
        //         console.log(`–£–¥–∞–ª—è–µ–º —Ç–µ–≥ ${tag}`);
        //         try {
        //             await this.deleteTag(clientData.passToken, clientData.client.id, tag);
        //         } catch (e) {
        //             console.error(e);
        //         }
        //     } else {
        //         console.log(`–û—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–≥ ${tag}`);
        //     }
        // }

        // –°—Ç–∞–≤–∏–º –Ω—É–∂–Ω—ã–π –¢–ï–ì –¢–†–ï–ù–ï–†–ê
        let newTag = BotHelper.getTag(trainer.name, vptRequest.goal);
        try {
            console.log(`–°—Ç–∞–≤–∏–º —Ç–µ–≥ ${newTag}`);
            await this.addTag(clientData.passToken, clientData.client.id, newTag);
        } catch (e) {
            console.error(e);
        }
        console.log(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ #${vptRequest.id}, –Ω–æ–≤—ã–π userId: ${trainer.id}, –Ω–æ–≤—ã–π —Ç–µ–≥: ${newTag}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
        clientData = await this.apiClientData(phoneWithoutPlus);
        if (!clientData) {
            return bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞.');
        }

        // –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∞–Ω–∫–µ—Ç–µ
        await this.updateVptRequestAnketa(prisma, vptRequest.id, clientData.client.anketa);
        await this.updateVptRequestTags(prisma, vptRequest.id, clientData.client.tags);
        let newHistory = `${vptRequest.history}\n\n${this.nowDateTime()}\nüéØ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '${newTag}'`;
        await this.updateVptRequestHistory(prisma, vptRequest.id, newHistory);

        const { client } = clientData;

        let firstRow = `–¢—Ä–µ–Ω–µ—Ä @${trainer.nick} –≤–∑—è—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –í–ü–¢\n\n`;
        let lastRow = `\n\n‚ö†Ô∏è –ï—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–ë–µ—Ä—É" / "–ù–µ –±–µ—Ä—É" –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–≤—É—Ö —Å—É—Ç–æ–∫ (–¥–æ ${this.nowPlus48Hours()}), –∫–ª–∏–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –¥—Ä—É–≥–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É, –∞ –≤–∞—à–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç —Å–Ω–∏–∂–µ–Ω–∞. –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∂–¥—ë—Ç.`
        let captionText = this.captionTextForTrainer(firstRow, vptRequest, lastRow);
        let apiSendPhotoObj = await this.apiSendPhotoUrl(bot, trainer.chatId, client.photoUrl, captionText);
        if (!apiSendPhotoObj) {
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ');
            return;
        }
        const { messageId } = apiSendPhotoObj;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        let inline_keyboard_for_trainer = [
            [
                {
                    text: '‚úÖ –ë–µ—Ä—É',
                    callback_data: [`vpt_status`, `accepted`, vptRequest.id].join('@')
                },
                {
                    text: '‚ùå –ù–µ –±–µ—Ä—É',
                    callback_data: [`vpt_status`, `rejected`, vptRequest.id].join('@')
                }
            ]
        ];
        await this.updateInlineKeyboard(bot, trainer.chatId, messageId, inline_keyboard_for_trainer);

        // –ß—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∑–∞—è–≤–∫–æ–π
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ vptRequest –¥–æ–±–∞–≤–ª—è–µ–º "|chatId@messageId" –≤ vptRequest.tgChatIdMessageId
        let newTgChatMessageId = `${vptRequest.tgChatMessageId}|${trainer.chatId}@${messageId}`;
        await this.updateVptRequestTgChatMessageId(prisma, vptRequest.id, newTgChatMessageId);
        
        await this.updateVptRequestUserId(prisma, vptRequest.id, trainer.id);
        await this.updateVptRequestCreatedAt(prisma, vptRequest.id);

        bot.sendMessage(chatId, `–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${newTag}\n–ü—Ä–æ—Å–º–æ—Ç—Ä: /vpt_request_show${vptRequest.id}`);

        return messageId;
    }


    // –ü–µ—Ä–µ–¥–∞–µ–º –∞–Ω–∫–µ—Ç—É —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É
    static async anketaToFitDir(bot, prisma, vptRequest) {
        // –ö–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–µ–º —Ñ–∏—Ç–¥–∏—Ä—É —Ç—Ä–µ–Ω–µ—Ä –æ–±–Ω—É–ª—è–µ—Ç—Å—è
        vptRequest = await this.updateVptRequestUserId(prisma, vptRequest.id, null);
        let requestVptPhotoId = vptRequest.photo;
        let screenshotUser = await this.getScreenshotUserById(prisma, vptRequest.screenshotUserId);
        console.log('–©–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ –∏ –º–µ–≥–∞–∫–æ–º–º–µ–Ω—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤');

        let fitDirUser = await this.getFitDirUser(prisma);
        if (!fitDirUser) {
            bot.sendMessage('–§–∏—Ç–î–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ .env');
            return;
        }
        let fitDirChatId = fitDirUser.chatId;

        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –§–ò–¢–î–ò–†–£ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –ø–æ–∫–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        let firstRow = `–§–î @${fitDirUser.nick} –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ \n\n`;
        const sentMessage = await bot.sendPhoto(fitDirChatId, requestVptPhotoId, {
            caption: this.captionTextForFitDir(firstRow, vptRequest, screenshotUser, '')
        });
        let messageId = sentMessage.message_id; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        // –ß—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∑–∞—è–≤–∫–æ–π
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ vptRequest –¥–æ–±–∞–≤–ª—è–µ–º "|chatId@messageId" –≤ vptRequest.tgChatIdMessageId
        let newTgChatMessageId = `${vptRequest.tgChatMessageId}|${fitDirChatId}@${messageId}`;
        await this.updateVptRequestTgChatMessageId(prisma, vptRequest.id, newTgChatMessageId);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏
        await this.addKeyboard(prisma, bot, messageId, vptRequest, fitDirUser);
    }

    static async addKeyboard(prisma, bot, messageId, vptRequest, fitDirUser) {
        let fitDirChatId = fitDirUser.chatId;
        let goalRus = vptRequest.goal;

        // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–Ω–µ—Ä–∞–º–∏
        let trainersWithGoal = await this.getUsersByGoal(prisma, goalRus);
        trainersWithGoal = trainersWithGoal.map(el => { return { name: el.name, chatId: el.chatId, telegramID: el.telegramID }; });
        let buttonsPerRow = 3;
        let inline_keyboard = [];
        let row = [];
        trainersWithGoal.forEach((trainer, index) => {
            row.push({
                text: trainer.name,
                callback_data: ['vs', messageId, trainer.chatId, vptRequest.id].join('@')
            });
            if (row.length === buttonsPerRow || index === trainersWithGoal.length - 1) {
                inline_keyboard.push(row);
                row = [];
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥
        inline_keyboard.push([
            { text: "üóë –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data: ['vpt_delete', vptRequest.id].join('@') } // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –í–ü–¢ 
        ]);

        await this.updateInlineKeyboard(bot, fitDirChatId, messageId, inline_keyboard);
        console.log('keyboard with trainers updated!');
    }


    static async fetchPhotoWithRetry(photoUrl, retries = 5, delay = 1000) {
        const headers = {
            'Authorization': process.env.AUTHORIZATION,
            'apikey': process.env.API_KEY
        };

        for (let i = 0; i < retries; i++) {
            try {
                const response = await axios.get(photoUrl, {
                    headers,
                    responseType: 'arraybuffer'
                });

                const filePath = path.join(__dirname, 'photo.jpg');
                fs.writeFileSync(filePath, response.data);
                console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω:', filePath);
                return filePath;
            } catch (error) {
                console.error(`–ü–æ–ø—ã—Ç–∫–∞ ${i + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error.message);
                if (i < retries - 1) {
                    const waitTime = delay * Math.pow(2, i);
                    console.log(`–û–∂–∏–¥–∞–Ω–∏–µ ${waitTime} –º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
                    await new Promise(resolve => setTimeout(resolve, waitTime));
                } else {
                    console.error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.');
                }
            }
        }
    }
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å captionText –≤ —á–∞—Ç cahtId –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç fileId (—Ñ–æ—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º)  –∏ messageId (id —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ)
    static async apiSendPhotoUrl(bot, chatId, photoUrl, captionText) {
        try {
            let filePath;

            if (!photoUrl) {
                // –ï—Å–ª–∏ URL –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª g1.jpeg
                filePath = path.join(__dirname, 'g1.jpeg');
            } else {
                let apiFilePath = await this.fetchPhotoWithRetry(photoUrl);
                filePath = apiFilePath || filePath;
            }

            const sentMessage = await bot.sendPhoto(chatId, filePath, {
                caption: captionText
            });

            const messageId = sentMessage.message_id;
            const fileId = sentMessage.photo[sentMessage.photo.length - 1].file_id;

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏ –µ–≥–æ
            if (photoUrl) {
                fs.unlinkSync(filePath);
            }

            return { fileId, messageId };
        } catch (error) {
            bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.');
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:', error);
            return null;
        }
    }


    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–∫–Ω—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –ø–æ chatId –∏ messageId
    static async deleteMessage(bot, chatId, messageId) {
        try {
            await bot.deleteMessage(chatId, messageId);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
        }
    }
    // –ó–Ω–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    static async updateInlineKeyboard(bot, chatId, messageId, newKeyboard) {
        // console.log(newKeyboard);
        try {
            await bot.editMessageReplyMarkup(
                { inline_keyboard: newKeyboard },
                { chat_id: chatId, message_id: messageId }
            );
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã:", error);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è  
    static translateStatus(status) {
        const translations = {
            "active": "üü¢ –ê–∫—Ç–∏–≤–Ω–æ",
            "not_active": "üü† –ù–µ –∞–∫—Ç–∏–≤–Ω–æ",
            "frozen": "‚ùÑÔ∏è –ó–∞–º–æ—Ä–æ–∂–µ–Ω–æ",
            "locked": "üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ",
            "closed": "‚ùå –ó–∞–∫—Ä—ã—Ç–æ"
        };

        return translations[status] || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å";
    }

    // –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥
    static async addTag(userToken, clientId, tag) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /tag
        const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag`;
        await axios.post(tagUrl, {
            tag: tag,
            client_id: clientId
        }, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: userToken
            }
        });
    }

    // —É–¥–∞–ª–∏—Ç—å —Ç–µ–≥
    static async deleteTag(userToken, clientId, tag) {
        const tagUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tag?tag=${tag}&client_id=${clientId}`;
        await axios.delete(tagUrl, {
            tag: tag,
            client_id: clientId
        }, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: userToken
            }
        });
    }

    // –¢–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —á–ª–µ–Ω—Å—Ç–≤–∞—Ö/–ø–∞–∫–µ—Ç–∞—Ö/—É—Å–ª—É–≥–∞—Ö
    static async getTicketsText(passToken) {
        const ticketsUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/tickets`;
        const ticketsResponse = await axios.get(ticketsUrl, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: passToken
            }
        });

        function getMembershipServices(el) {
            return (el.type === 'membership' && el.service_list && el.service_list.length > 0)
                ? '–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:\n' + el.service_list
                    .map(ss => `üî• ${ss.title}\n–û—Å—Ç–∞—Ç–æ–∫: ${ss.count}, —Ä–µ–∑–µ—Ä–≤: ${ss.count_reserves}`).join('\n') + '\n'
                : '';
        }

        function getEndDate(el) {
            return el.end_date
                ? `(–¥–æ ${new Date(el.end_date).toLocaleDateString("ru-RU")})\n`
                : '';
        }

        function getPackageCount(el) {
            return (el.type === 'package' && el.count)
                ? `–û—Å—Ç–∞—Ç–æ–∫: ${el.count}\n`
                : '';
        }

        if (ticketsResponse.data) {
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ package –∏ membership
            const filteredData = ticketsResponse.data.data.filter(el =>
                el.type === 'package' || el.type === 'membership'
            );

            let txt = filteredData.map(el =>
                `${this.translateStatus(el.status)}: ${el.title}\n${getEndDate(el)}${getPackageCount(el)}${getMembershipServices(el)}`
            ).join('\n');

            return txt || "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö.";
        } else {
            return "–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥–∞—Ö.";
        }
    }


    // –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
    static async getClientResponse(passToken) {
        const clientUrl = `https://${process.env.API_HOSTNAME}:${process.env.API_PORT}${process.env.API_PATH}/client`;
        const clientResponse = await axios.get(clientUrl, {
            headers: {
                'Content-Type': 'application/json',
                apikey: process.env.API_KEY,
                Authorization: process.env.AUTHORIZATION,
                usertoken: passToken
            }
        });
        return clientResponse;
    }

    // +7(978) 566-71-99 —Ö–æ—á–µ—Ç –Ω–∞ –í–ü–¢
    // –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ phone: 79785667199, comment: "—Ö–æ—á–µ—Ç –Ω–∞ –í–ü–¢"
    static parseMessage(message) {
        let match = message?.match(/([+8]?\d?[\s\-\(\)]*\d{3}[\s\-\(\)]*\d{3}[\s\-]*\d{2}[\s\-]*\d{2})([\s\S]*)/);

        if (!match) return null;

        let rawPhone = match[1];
        let comment = match[2].trim().replace(/\s+/g, " "); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫

        // –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
        let phone = rawPhone.replace(/\D/g, "");

        // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É (–¥–æ–±–∞–≤–ª—è–µ–º 7, –µ—Å–ª–∏ 10 —Ü–∏—Ñ—Ä, –Ω–æ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º –µ—Å–ª–∏ —É–∂–µ 11 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 7)
        if (phone.length === 10) {
            phone = "7" + phone;
        } else if (phone.length === 11 && phone.startsWith("8")) {
            phone = "7" + phone.slice(1);
        } else if (phone.length === 11 && phone.startsWith("+7")) {
            phone = "7" + phone.slice(2);
        }

        return { phone: phone, comment: comment };
    }

    static nowDateTime() {
        let nowdatetime = new Date().toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow', day: '2-digit', month: '2-digit', year: 'numeric',
            hour: '2-digit', minute: '2-digit'
        });
        return nowdatetime;
    }

    static nowPlus48Hours() {
        let now = new Date();
        now.setHours(now.getHours() + 48); // –î–æ–±–∞–≤–ª—è–µ–º 48 —á–∞—Å–æ–≤
    
        let newDateTime = now.toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow',
            day: '2-digit', month: '2-digit', year: 'numeric',
            hour: '2-digit', minute: '2-digit'
        });
    
        return newDateTime;
    }
    
    
    static async getExpiredRequests(prisma) {
        const twoDaysAgo = new Date();
        twoDaysAgo.setHours(twoDaysAgo.getHours() - 48); // –û—Ç–Ω–∏–º–∞–µ–º 48 —á–∞—Å–æ–≤

        return await prisma.vPTRequest.findMany({
            where: {
                status: 'none',
                createdAt: { lt: twoDaysAgo }
            }
        });
    }


    static tomorrowDateTime14h00m() {
        let now = new Date();
    
        // –î–æ–±–∞–≤–ª—è–µ–º 1 –¥–µ–Ω—å
        now.setDate(now.getDate() + 1);
    
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ 14:00
        now.setHours(14, 0, 0, 0);
    
        let formattedDateTime = now.toLocaleString('ru-RU', {
            timeZone: 'Europe/Moscow', 
            day: '2-digit', 
            month: '2-digit', 
            year: 'numeric',
            hour: '2-digit', 
            minute: '2-digit'
        });
    
        return formattedDateTime;
    }

    
    static async getFitDirUser(prisma) {
        const fitDirPhone = process.env.FIT_DIR_PHONE;
        if (!fitDirPhone) {
            console.error("FIT_DIR_PHONE –Ω–µ –∑–∞–¥–∞–Ω –≤ .env");
            return null;
        }

        const user = await prisma.user.findUnique({
            where: { phoneNumber: fitDirPhone }
        });

        return user ? user : null;
    }

    // —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø–æ "–¢–ó" –∏–ª–∏ "–ì–ü" –∏–ª–∏ "–ê–∫–≤–∞"
    static async getUsersByGoal(prisma, goal) {
        if (!goal) {
            console.error("Goal –Ω–µ –∑–∞–¥–∞–Ω");
            return [];
        }

        const users = await prisma.user.findMany({
            where: {
                vpt_list: {
                    contains: goal
                }
            },
            orderBy: {
                name: "asc"
            }
        });

        return users;
    }

    static async getUserByChatId(prisma, chatId) {
        if (!chatId) {
            console.error("Chat ID –Ω–µ –∑–∞–¥–∞–Ω");
            return null;
        }

        const user = await prisma.user.findUnique({
            where: { chatId }
        });

        return user;
    }

    static async getUserById(prisma, id) {
        if (!id) {
            console.error("ID –Ω–µ –∑–∞–¥–∞–Ω");
            return null;
        }

        const user = await prisma.user.findUnique({
            where: { id }
        });

        return user;
    }

    static async getScreenshotUserById(prisma, id) {
        if (!id) {
            console.error("ID –Ω–µ –∑–∞–¥–∞–Ω");
            return null;
        }

        const user = await prisma.screenshotUser.findUnique({
            where: { uniqueId: id }
        });

        return user;
    }

    static async getVPTRequestById(prisma, id) {
        try {
            const vptRequest = await prisma.vPTRequest.findUnique({
                where: { id }
            });

            return vptRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }

    static async deleteVPTRequestById(prisma, id) {
        try {
            const deletedRequest = await prisma.vPTRequest.delete({
                where: { id }
            });

            return deletedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }


    static async createVPTRequest(prisma, userId, screenshotUserId, visitTime, phoneNumber, photo, comment, anketa, history, tags, goal, tgChatMessageId) {
        const vptRequest = await prisma.vPTRequest.create({
            data: {
                user: userId ? { connect: { id: userId } } : undefined, // –°–≤—è–∑—ã–≤–∞–µ–º user, –µ—Å–ª–∏ userId —É–∫–∞–∑–∞–Ω
                screenshotUser: {
                    connect: { uniqueId: screenshotUserId } // –°–≤—è–∑—ã–≤–∞–µ–º screenshotUser
                },
                visitTime,
                phoneNumber,
                photo,
                comment,
                anketa,
                history,
                tags,
                goal,
                tgChatMessageId
            }
        });

        return vptRequest;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é
    static async anketaForVptRequest (bot, prisma, vptRequest, chatId, captionText) {
        try {
            let sentMessage = await bot.sendPhoto(chatId, vptRequest.photo, { caption: captionText });   
            // –ß—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å –∑–∞—è–≤–∫–æ–π
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤ vptRequest –¥–æ–±–∞–≤–ª—è–µ–º "|chatId@messageId" –≤ vptRequest.tgChatIdMessageId
            let newTgChatMessageId = `${vptRequest.tgChatMessageId}|${chatId}@${sentMessage.message_id}`;
            vptRequest = await this.updateVptRequestTgChatMessageId(prisma, vptRequest.id, newTgChatMessageId);
            return { sentMessage, vptRequest }
        } catch (e) {
            console.error(e);
            return null;
        }

    }
    // –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ tgChatMessageId –¥–ª—è –∑–∞—è–≤–∫–∏ –Ω–∞ –í–ü–¢
    static async updateVptRequestTgChatMessageId(prisma, id, tgChatMessageId) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { tgChatMessageId }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tgChatMessageId –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }


    static async updateVptRequestAnketa(prisma, id, anketa) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { anketa }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è anketa –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }
    static async updateVptRequestTags(prisma, id, tags) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { tags }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è tags –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }
    static async updateVptRequestHistory(prisma, id, history) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { history }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è history –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }

    static async updateVPTRequestPhoto(prisma, id, photoUrl) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { photo: photoUrl }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è photoUrl –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }

    static async updateVptRequestCreatedAt(prisma, id) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { createdAt: new Date() }
            });
    
            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è created_at –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }

    
    static async updateVptRequestUserId(prisma, id, userId) {
        try {
            const updatedRequest = await prisma.vPTRequest.update({
                where: { id },
                data: { userId: userId }
            });

            return updatedRequest;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è userId –¥–ª—è vPTRequest —Å id ${id}:`, error);
            return null;
        }
    }


    // –°–æ–∑–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∑–∞—è–≤–∫–∏ –≤ –ë–î
    static async checkOrCreateScreenshotUser(prisma, telegramID, telegramNickname) {
        try {
            let uniqueId = telegramID.toString();
            let sender = telegramNickname;
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ ScreenshotUser —Å —Ç–∞–∫–∏–º uniqueId
            let screenshotUser = await prisma.screenshotUser.findUnique({
                where: { uniqueId }
            });

            // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (!screenshotUser) {
                screenshotUser = await prisma.screenshotUser.create({
                    data: {
                        uniqueId,
                        sender
                    }
                });
            }

            return screenshotUser;
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ ScreenshotUser:", error);
            throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å ScreenshotUser");
        }
    }

    static getQueryTelegramUserInfo(query) {
        return '@' + (query?.from?.username || '–ù–µ—Ç–ù–∏–∫–Ω–µ–π–º–∞') + ' (' + (query?.from?.first_name || '–ù–µ—Ç–ò–º–µ–Ω–∏ ') + ' ' + (query?.from?.last_name || '–ù–µ—Ç–§–∞–º–∏–ª–∏–∏') + ')'; // –ù–∏–∫–Ω–µ–π–º (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
    }

    static goalRus(goal) {
        let goalRus = goal;
        if (goal === 'tz') { goalRus = '–¢–ó'; }
        if (goal === 'gp') { goalRus = '–ì–ü'; }
        if (goal === 'aq') { goalRus = '–ê–∫–≤–∞'; }
        return goalRus;
    }

    static goalRusWithEmojii(goal) {
        let goalRus = goal;
        if (goal === 'tz' || goal === '–¢–ó') { goalRus = 'üèãüèº‚Äç‚ôÇÔ∏è –¢–ó'; }
        if (goal === 'gp' || goal === '–ì–ü') { goalRus = 'ü§∏üèª‚Äç‚ôÄÔ∏è –ì–ü'; }
        if (goal === 'aq' || goal === '–ê–∫–≤–∞') { goalRus = 'üèä –ê–∫–≤–∞'; }
        return goalRus;
    }

    static visitTimeWithEmojii(visitTime) {
        let result = visitTime;
        if (visitTime === '–£—Ç—Ä–æ') { result = 'üåÖ –£—Ç—Ä–æ'; }
        if (visitTime === '–û–±–µ–¥') { result = '‚òÄÔ∏è –û–±–µ–¥'; }
        if (visitTime === '–í–µ—á–µ—Ä') { result = 'üåô –í–µ—á–µ—Ä'; }
        if (visitTime === '–í–µ—Å—å –¥–µ–Ω—å') { result = 'üåç –í–µ—Å—å –¥–µ–Ω—å'; }
        return result;
    }

    static getTag(tarinerName, goalRus) {
        if (!tarinerName) return '';
        const parts = tarinerName.trim().split(/\s+/);
        if (parts.length === 0) return '';

        const lastName = parts[0]; // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —Ñ–∞–º–∏–ª–∏—è
        const initials = parts.slice(1).map(name => name[0] + '.').join(''); // –ü–µ—Ä–≤—ã–µ –±—É–∫–≤—ã –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω

        return `–í–ü–¢ ${goalRus} ${lastName} ${initials}`;
    }

}

module.exports = BotHelper;