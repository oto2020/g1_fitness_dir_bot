/**
 * notifyUsers.js
 * –ó–∞–ø—É—Å–∫: node notifyUsers.js
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ (polling = false, —Ç.–∫. —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
const bot = new TelegramBot(process.env.TOKEN, { polling: false });
const GROUP_ID = process.env.GROUP_ID;


/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –±—ç–∫–æ—Ñ—Ñ–æ–º.
 *
 * @param {number|string} chatId - –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
 * @param {string} text - —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
 * @param {number} attempt - —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
 * @returns {Promise<void>}
 */
async function sendMessageWithRetry(chatId, text, attempt = 1) {
  const maxAttempts = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

  try {
    await bot.sendMessage(chatId, text);
  } catch (error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è –ª–∏ –∫–æ–¥ 429 (Too Many Requests)
    if (
      (error.response && error.response.statusCode === 429) ||
      error.code === 'ETELEGRAM'
    ) {
      // ETELEGRAM –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å —Ä—è–¥ Telegram-–æ—à–∏–±–æ–∫; –¥–ª—è 429 –æ–±—ã—á–Ω–æ –±—É–¥–µ—Ç statusCode
      console.error('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 429 –∏–ª–∏ –ø–æ—Ö–æ–∂–∞—è –æ—à–∏–±–∫–∞:', error.message);
      const delay = Math.pow(2, attempt) * 1000; // 2^attempt * 1000 –º—Å
      console.log(`[Rate-limit] –ñ–¥—ë–º ${delay / 1000} c –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º #${attempt}...`);
      await new Promise((resolve) => setTimeout(resolve, delay));

      // –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º
      if (attempt < maxAttempts) {
        return sendMessageWithRetry(chatId, text, attempt + 1);
      }

      // –ï—Å–ª–∏ –ø–æ–ø—ã—Ç–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId} –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫.`
      );
    } else {
      // –õ—é–±–∞—è –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ ‚Äî –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}:`, error.message);
      throw error;
    }
  }
}

async function main() {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const startOfMonth = new Date();
    startOfMonth.setDate(1);
    startOfMonth.setHours(0, 0, 0, 0);

    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(endOfMonth.getMonth() + 1);
    endOfMonth.setDate(0); // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –¥–Ω—é —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    endOfMonth.setHours(23, 59, 59, 999);

    // // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ: —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å id = 45 –∏ 57
    // const targetUsers = await prisma.user.findMany({
    //   where: {
    //     id: { in: [45, 57] },
    //   },
    // });
    const targetUsers = await prisma.user.findMany();


    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å–±–æ—Ä–∞ "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" –∏ –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ù–ï—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    const trainersWithNoneCount = [];

    for (const user of targetUsers) {
      // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫ (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã) –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      const totalCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ–≥–æ 0 –∑–∞—è–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü
      if (totalCount === 0) {
        continue;
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ä–∞–∑–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º:
      const noneCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          status: 'none',
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      const acceptedCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          status: 'accepted',
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      const rejectedCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          status: 'rejected',
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      let personalMessage = `${user.name ?? ''} @${user.nick ?? ''},\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º –í–ü–¢ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:`;
      personalMessage += `\n‚è≥ ${noneCount} | –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ`;
      personalMessage += `\n‚úÖ ${acceptedCount} | –ø—Ä–∏–Ω—è—Ç—ã–µ`;
      personalMessage += `\n‚ùå ${rejectedCount} | –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ`;

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ noneCount = 0, –¥–æ–±–∞–≤–ª—è–µ–º "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", –∏–Ω–∞—á–µ ‚Äî "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å..."
      if (noneCount === 0) {
        personalMessage += `\n–í—Å–µ –í–ü–¢ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üéâ`;
      } else {
        personalMessage += `\n\n‚ö†Ô∏è –£ –≤–∞—Å ${noneCount} –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –í–ü–¢.\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å: \n/vpt_none${user.telegramID}`;
      }

      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å telegramID, –æ—Ç–ø—Ä–∞–≤–∏–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (user.telegramID) {
        await sendMessageWithRetry(user.telegramID, personalMessage);
      }

      // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Å–≤–æ–¥–∫–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" —Å –Ω–µ–Ω—É–ª–µ–≤—ã–º noneCount:
      if (noneCount > 0) {
        trainersWithNoneCount.push({ user, noneCount });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" –ø–æ —É–±—ã–≤–∞–Ω–∏—é –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    trainersWithNoneCount.sort((a, b) => b.noneCount - a.noneCount);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç—Ä–µ–Ω–µ—Ä —Å noneCount > 0
    if (trainersWithNoneCount.length > 0) {
      let groupMessage = '–°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å ‚è≥ –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n';
      for (const item of trainersWithNoneCount) {
        const { user, noneCount } = item;
        groupMessage += `\n- ${user.name ?? ''} @${user.nick ?? ''}: ${noneCount}`;
      }

      await sendMessageWithRetry(GROUP_ID, groupMessage);
    }

    console.log('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
  } finally {
    await prisma.$disconnect();
  }
}

main();
