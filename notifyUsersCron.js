/**
 * notifyUsers.js
 * 
 * –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ PM2:
 *   pm2 start notifyUsers.js --name "daily-vpt-bot"
 *
 * –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç "–≤–∏—Å–µ—Ç—å" –≤ –ø–∞–º—è—Ç–∏ –∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 (–ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏) 
 * –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É, –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é main().
 */

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma
const prisma = new PrismaClient();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ (polling = false, —Ç.–∫. –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –∏—Å—Ö–æ–¥—è—â–∏–µ)
const bot = new TelegramBot(process.env.TOKEN, { polling: false });
const GROUP_ID = process.env.GROUP_ID;

main();
// -------------------------------------------------------
// 1. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ cron: –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00
// -------------------------------------------------------
cron.schedule('0 12 * * *', () => {
  console.log('Cron: –ó–∞–ø—É—Å–∫–∞–µ–º main() –≤ 12:00');
  main();
});

// -------------------------------------------------------
// 2. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±—ç–∫–æ—Ñ—Ñ–æ–º
// -------------------------------------------------------
async function sendMessageWithRetry(chatId, text, attempt = 1) {
  const maxAttempts = 5; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤

  try {
    await bot.sendMessage(chatId, text);
  } catch (error) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ 429 (Too Many Requests)
    if (
      (error.response && error.response.statusCode === 429) ||
      error.code === 'ETELEGRAM'
    ) {
      console.error('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç 429 –∏–ª–∏ –ø–æ—Ö–æ–∂–∞—è –æ—à–∏–±–∫–∞:', error.message);
      const delay = Math.pow(2, attempt) * 1000; // 2^attempt * 1000 –º—Å
      console.log(`[Rate-limit] –ñ–¥—ë–º ${delay / 1000} c –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º #${attempt}...`);
      await new Promise((resolve) => setTimeout(resolve, delay));

      if (attempt < maxAttempts) {
        return sendMessageWithRetry(chatId, text, attempt + 1);
      }
      throw new Error(
        `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç ${chatId} –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫.`
      );
    } else {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ —á–∞—Ç ${chatId}:`, error.message);
      throw error;
    }
  }
}

// -------------------------------------------------------
// 3. –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ (main)
// -------------------------------------------------------
async function main() {
  try {
    // 3.1 –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const startOfMonth = new Date();
    startOfMonth.setDate(1);
    startOfMonth.setHours(0, 0, 0, 0);

    const endOfMonth = new Date(startOfMonth);
    endOfMonth.setMonth(endOfMonth.getMonth() + 1);
    endOfMonth.setDate(0);
    endOfMonth.setHours(23, 59, 59, 999);

    // 3.2 –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const targetUsers = await prisma.user.findMany();

    // –ë—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç–µ—Ö, —É –∫–æ–≥–æ –µ—Å—Ç—å –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ ‚Äî –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    const trainersWithNoneCount = [];

    for (const user of targetUsers) {
      // 3.3 –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ —á–∏—Å–ª–æ –∑–∞—è–≤–æ–∫ –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ (–ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞)
      const totalCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      // –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞—è–≤–æ–∫ –∑–∞ –º–µ—Å—è—Ü ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
      if (totalCount === 0) {
        continue;
      }

      // 3.4 –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const noneCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          status: 'none',
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      const acceptedCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          status: 'accepted',
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      const rejectedCount = await prisma.vPTRequest.count({
        where: {
          userId: user.id,
          status: 'rejected',
          createdAt: {
            gte: startOfMonth,
            lte: endOfMonth,
          },
        },
      });

      // 3.5 –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      let personalMessage = `${user.name ?? ''} @${user.nick ?? ''},\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞—è–≤–∫–∞–º –í–ü–¢ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:`;
      personalMessage += `\n‚è≥ ${noneCount} | –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ`;
      personalMessage += `\n‚úÖ ${acceptedCount} | –ø—Ä–∏–Ω—è—Ç—ã–µ`;
      personalMessage += `\n‚ùå ${rejectedCount} | –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ`;

      // –µ—Å–ª–∏ noneCount = 0 ‚Äî –≤—Å–µ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã
      if (noneCount === 0) {
        personalMessage += `\n–í—Å–µ –í–ü–¢ —Ä–∞–∑–æ–±—Ä–∞–Ω—ã, —Ç–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üéâ`;
      } else {
        personalMessage += `\n\n‚ö†Ô∏è –£ –≤–∞—Å ${noneCount} –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –í–ü–¢.\n–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å: /vpt_none${user.telegramID}`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å telegramID)
      if (user.telegramID) {
        await sendMessageWithRetry(user.telegramID, personalMessage);
      }

      // 3.6 –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –≥—Ä—É–ø–ø—ã
      // –î–æ–ø—É—Å—Ç–∏–º, –Ω–∞–º –Ω—É–∂–Ω—ã –≤—Å–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ (noneCount > 0)
      // (–∏–ª–∏ —Ç–æ–ª—å–∫–æ '—Ç—Ä–µ–Ω–µ—Ä—ã' ‚Äî —Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∞–º–∏).
      if (noneCount > 0) {
        trainersWithNoneCount.push({ user, noneCount });
      }
    }

    // 3.7 –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –≤ –≥—Ä—É–ø–ø—É
    if (trainersWithNoneCount.length > 0) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
      trainersWithNoneCount.sort((a, b) => b.noneCount - a.noneCount);

      let groupMessage = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∑–∞—è–≤–∫–∞–º–∏ (‚è≥) –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü:\n';
      for (const item of trainersWithNoneCount) {
        const { user, noneCount } = item;
        groupMessage += `\n- ${user.name ?? ''} @${user.nick ?? ''}: ${noneCount}`;
      }

      await sendMessageWithRetry(GROUP_ID, groupMessage);
    }

    console.log('[main()] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('[main()] –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// -------------------------------------------------------
// 4. –í–ê–ñ–ù–û: –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º main() –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è.
//    cron.schedule() –≤—ã—à–µ —Å–∞–º –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å main() –≤ 12:00.
// -------------------------------------------------------

// –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é ¬´–ø–µ—Ç–ª—é¬ª (–Ω–µ–≤—ã–∑—ã–≤–∞–µ–º—ã–π –∫–æ–¥), —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è.
// –ï—Å–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç–æ `node notifyUsers.js`, 
// NodeJS —É–≤–∏–¥–∏—Ç, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π cron.schedule, –∏ ¬´–Ω–µ —É–º—Ä—ë—Ç¬ª —Å—Ä–∞–∑—É.
// –ù–æ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞—é—Ç:
//    pm2 start notifyUsers.js --name "daily-vpt-bot"
// —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å ¬´–∂–∏–ª¬ª –ø–æ—Å—Ç–æ—è–Ω–Ω–æ.
