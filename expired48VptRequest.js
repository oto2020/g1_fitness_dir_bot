const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');
const BotHelper = require('./BotHelper'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º BotHelper
const TelegramBot = require('node-telegram-bot-api');

const prisma = new PrismaClient();
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É
async function processExpiredRequests() {
    const cutoffDate = new Date();
    cutoffDate.setHours(cutoffDate.getHours() - 48); // –û—Ç–Ω–∏–º–∞–µ–º 48 —á–∞—Å–æ–≤

    try {
        const expiredRequests = await prisma.vPTRequest.findMany({
            where: {
                createdAt: { lt: cutoffDate }, // createdAt < (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - 48 —á–∞—Å–æ–≤)
                status: "none", // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            },
        });

        if (expiredRequests.length === 0) {
            console.log(`[${new Date().toLocaleString()}] –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "none".`);
            return;
        }

        console.log(`[${new Date().toLocaleString()}] –ù–∞–π–¥–µ–Ω–æ ${expiredRequests.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É...`);

        for (const vptRequest of expiredRequests) {
            try {
                await BotHelper.anketaToFitDir(bot, prisma, vptRequest);
                console.log(`‚úÖ –ó–∞—è–≤–∫–∞ ID ${vptRequest.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É.`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ ID ${vptRequest.id}:`, error);
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:", error);
    }
}

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', async () => {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫...");
    await processExpiredRequests();
});

// –ó–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
processExpiredRequests();
