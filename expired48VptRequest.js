const { PrismaClient } = require('@prisma/client');
const cron = require('node-cron');
const BotHelper = require('./BotHelper'); // –ü–æ–¥–∫–ª—é—á–∞–µ–º BotHelper
const TelegramBot = require('node-telegram-bot-api');

const prisma = new PrismaClient();
const bot = new TelegramBot(process.env.TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É
async function processExpiredRequests() {
    const cutoffDate = new Date();
    cutoffDate.setHours(cutoffDate.getHours() - 48); // –û—Ç–Ω–∏–º–∞–µ–º 48 —á–∞—Å–æ–≤

    try {
        const expiredRequests = await prisma.vPTRequest.findMany({
            where: {
                createdAt: { lt: cutoffDate }, // createdAt < (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ - 48 —á–∞—Å–æ–≤)
                status: "none", // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
            },
        });

        console.table(expiredRequests.map(el=> { return {id: el.id, userId: el.userId, comment: el.comment, goal: el.goal, visitTime: el.visitTime}}));
        
        let nowDateTime = BotHelper.nowDateTime();
        if (expiredRequests.length === 0) {
            console.log(`[${nowDateTime}] –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "none".`);
            return;
        }

        console.log(`[${nowDateTime}] –ù–∞–π–¥–µ–Ω–æ ${expiredRequests.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É...`);

        bot.sendMessage(process.env.GROUP_ID, `[${nowDateTime}] –ù–∞–π–¥–µ–Ω–æ ${expiredRequests.length} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É...`);

        for (const vptRequest of expiredRequests) {
            try {
                // –ù—É–∂–Ω–æ —É–¥–∞–ª—è—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∞ –ø–æ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª—è—Ç—å –§–∏—Ç–î–∏—Ä—É
                let tgVptChatMessages = vptRequest.tgChatMessageId?.split('|');
                for (const vptTgChatMessage of tgVptChatMessages) {
                    let [chatId, messageId] = vptTgChatMessage.split('@');
                    await BotHelper.deleteMessage(bot, chatId, messageId);
                    console.log(`–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ${chatId}@${messageId}`);
                }

                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Ñ–æ—Ç–æ –∑–∞—è–≤–∫–∏
                try {
                    let badTrainer = await BotHelper.getUserById(prisma, vptRequest.userId);
                    await bot.sendPhoto(badTrainer.chatId, vptRequest.photo, { caption: `‚ö†Ô∏è –í—ã –ø—Ä–æ—Å—Ä–æ—á–∏–ª–∏ –∑–∞—è–≤–∫—É #${vptRequest.id}\n\n–û–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–æ–º—É —Ç—Ä–µ–Ω–µ—Ä—É.\n\n${badTrainer.name} (@${badTrainer.nick}), –≤–∞—à–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –∂–¥–∞—Ç—å –±–æ–ª–µ–µ 2 —Å—É—Ç–æ–∫...`});
                } catch (e) {
                    console.error(e);
                }

                // –£–¥–∞–ª—è—Ç—å —Ç–µ–≥ —Ç—Ä–µ–Ω–µ—Ä–∞
                await BotHelper.deleteTagForVptRequest(prisma, vptRequest);

                // –û–±–Ω—É–ª—è—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –≤ –∑–∞—è–≤–∫–µ
                await BotHelper.updateVptRequestUserId(prisma, vptRequest.id, null);

                // –û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
                let newHistory = `${vptRequest.history}\n\n${BotHelper.nowDateTime()}\n‚ö†Ô∏è –ó–ê–Ø–í–ö–ê –ü–†–û–°–†–û–ß–ï–ù–ê`;
                await BotHelper.updateVptRequestHistory(prisma, vptRequest.id, newHistory);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ê–Ω–∫–µ—Ç—É –§–∏—Ç–¥–∏—Ä—É. –≠—Ç–æ –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await BotHelper.anketaToFitDir(bot, prisma, vptRequest);
                console.log(`‚úÖ –ó–∞—è–≤–∫–∞ ID ${vptRequest.id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–∏—Ç–Ω–µ—Å-–¥–∏—Ä–µ–∫—Ç–æ—Ä—É.`);
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ ID ${vptRequest.id}:`, error);
            }
        }
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫:", error);
    }
}

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 14:00
cron.schedule('0 14 * * *', async () => {
    console.log("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫...");
    await processExpiredRequests();
});


// –ó–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
processExpiredRequests();
