datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          BigInt       @id @default(autoincrement())
  chatId      BigInt       @unique
  name        String?
  nick        String?      @unique // Поле для никнейма
  phoneNumber String?      @unique
  position    String?
  telegramID  BigInt?      @unique // Поле для Telegram ID
  birthday    DateTime?    // Поле для даты рождения
  photo       String?      // Адрес фото телеграм
  timestamp   DateTime     @default(now())
  vpt_list    String?      // Новое строковое поле
  role        String?      @default("пользователь") // пользователь/редактор/админ
  wishVptCount BigInt      @default(0)

  // Флаги
  flag01      Boolean      @default(false)
  flag02      Boolean      @default(false)
  flag03      Boolean      @default(false)
  flag04      Boolean      @default(false)
  flag05      Boolean      @default(false)
  flag06      Boolean      @default(false)
  flag07      Boolean      @default(false)
  flag08      Boolean      @default(false)
  flag09      Boolean      @default(false)
  flag10      Boolean      @default(false)
  flag11      Boolean      @default(false)
  flag12      Boolean      @default(false)
  flag13      Boolean      @default(false)
  flag14      Boolean      @default(false)
  flag15      Boolean      @default(false)
  flag16      Boolean      @default(false)
  flag17      Boolean      @default(false)
  flag18      Boolean      @default(false)
  flag19      Boolean      @default(false)
  flag20      Boolean      @default(false)
  flag21      Boolean      @default(false)
  flag22      Boolean      @default(false)
  flag23      Boolean      @default(false)
  flag24      Boolean      @default(false)
  flag25      Boolean      @default(false)
  flag26      Boolean      @default(false)
  flag27      Boolean      @default(false)
  flag28      Boolean      @default(false)
  flag29      Boolean      @default(false)
  flag30      Boolean      @default(false)
  flag31      Boolean      @default(false)
  flag32      Boolean      @default(false)
  flag33      Boolean      @default(false)
  flag34      Boolean      @default(false)
  flag35      Boolean      @default(false)
  flag36      Boolean      @default(false)
  flag37      Boolean      @default(false)
  flag38      Boolean      @default(false)
  flag39      Boolean      @default(false)
  flag40      Boolean      @default(false)

  vptRequests VPTRequest[] // Связь с заявками на ВПТ
}

model UserFlags {
  id          BigInt   @id @default(autoincrement())
  name        String   // Название флага
  description String?  // Описание флага
}

model ScreenshotUser {
  uniqueId         String   @id @db.VarChar(255)
  sender           String   @default("Координатор")
  create_time      DateTime @default(now())
  homeStartX       Int?      @default(150)
  homeStartY       Int?      @default(210)
  homeWidth        Int?      @default(860)
  homeHeight       Int?      @default(810)
  f11StartX        Int?      @default(150)
  f11StartY        Int?      @default(210)
  f11Width         Int?      @default(860)
  f11Height        Int?      @default(810)
  upscaleFactor    Int?      @default(2)
  borderColor      String?   @default("Silver") @db.VarChar(45)
  borderThickness  Int?      @default(20)

  vptRequests VPTRequest[] // Связь с заявками на ВПТ
}

model VPTRequest {
  id             BigInt   @id @default(autoincrement())
  userId         BigInt?   @map("userId")
  screenshotUserId   String   @map("screenshotUserId") @db.VarChar(255)
  visitTime      String   @db.VarChar(255) // Утро, Обед, Вечер, Весь день
  phoneNumber    String   @db.VarChar(255)
  photo          String?      // Адрес фото скриншота экрана телеграм
  comment        String?  @db.VarChar(1000)
  goal           String?  @db.VarChar(255) // Новое поле "цель"
  createdAt      DateTime @default(now())
  tgChatMessageId String? // Новый столбец (nullable)

  // Возможные статусы:
  // Не в работе → none
  // В работе → accepted
  // Отказ тренера → rejected
  status         String?   @db.VarChar(255) @default("none")

  user           User?     @relation(fields: [userId], references: [id])
  screenshotUser     ScreenshotUser @relation(fields: [screenshotUserId], references: [uniqueId])
}
